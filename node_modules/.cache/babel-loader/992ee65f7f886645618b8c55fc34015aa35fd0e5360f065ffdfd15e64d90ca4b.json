{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\JFF-modeling and analysis\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, LogarithmicScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport './App.css';\nimport React, { useState, useEffect, createElement as _createElement } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, LogarithmicScale, PointElement, LineElement, Title, Tooltip, Legend);\nfunction App() {\n  _s();\n  const [analysisParams, setAnalysisParams] = useState({\n    // Network Value Parameters\n    network_value_multiplier: 100,\n    n_users: 1000,\n    // AI Cost Parameters\n    base_cost_per_user: 0.1,\n    infrastructure_base: 1000,\n    infrastructure_scaling: 1.2,\n    // Revenue Model Parameters\n    pricing_model: 'freemium',\n    subscription_price: 10,\n    conversion_rate: 0.05,\n    usage_price: 0.01,\n    avg_usage_per_user: 100,\n    revenue_per_user: 0,\n    // Calculated revenue per user\n    total_revenue: 0,\n    // Total projected revenue\n\n    // Market Analysis Parameters\n    gdp: 1e12,\n    population: 1e8,\n    target_percentile: 50,\n    price_to_income_ratio: 0.01,\n    shape_parameter: 1.0,\n    // Growth Scenario Parameters\n    max_users: 100000,\n    months: 36\n  });\n  const [selectedGraph, setSelectedGraph] = useState('cost_structure');\n  const [results, setResults] = useState(null);\n  const [error, setError] = useState(null);\n  const chartRef = React.useRef(null);\n  useEffect(() => {\n    let chart = null;\n    let frameId = null;\n    const initChart = () => {\n      if (!results || !chartRef.current) return;\n      try {\n        // Ensure any existing chart is destroyed\n        if (chartRef.current.chart) {\n          chartRef.current.chart.destroy();\n        }\n\n        // Create new chart instance\n        chart = chartRef.current.chart;\n\n        // Wait for the next frame to ensure the DOM is ready\n        frameId = requestAnimationFrame(() => {\n          try {\n            if (chart && chart.canvas && chart.canvas.parentNode) {\n              chart.update('none'); // Disable animation for the first update\n            }\n          } catch (error) {\n            console.error('Error updating chart:', error);\n            setError('Error displaying chart. Please try again.');\n          }\n        });\n      } catch (error) {\n        console.error('Error initializing chart:', error);\n        setError('Error initializing chart. Please try again.');\n      }\n    };\n    initChart();\n    return () => {\n      // Clean up\n      if (frameId) {\n        cancelAnimationFrame(frameId);\n      }\n      try {\n        if (chart && chart.destroy) {\n          chart.destroy();\n        }\n      } catch (error) {\n        console.error('Error destroying chart:', error);\n      }\n    };\n  }, [results, selectedGraph]); // Also reinitialize when graph type changes\n\n  // Cleanup on component unmount\n  useEffect(() => {\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.destroy();\n      }\n    };\n  }, []);\n  const formatNumber = (value, decimals = 2) => {\n    if (typeof value !== 'number' || isNaN(value)) return '';\n    return Number(value.toFixed(decimals));\n  };\n  const handleParamChange = (param, value) => {\n    try {\n      const newValue = typeof value === 'string' ? parseFloat(value) : value;\n      if (!isNaN(newValue)) {\n        setAnalysisParams(prev => ({\n          ...prev,\n          [param]: newValue\n        }));\n        setError(null); // Clear any previous errors\n      }\n    } catch (err) {\n      setError(`Invalid value for ${param}: ${err.message}`);\n    }\n  };\n  const validateParams = () => {\n    if (selectedGraph === 'revenue_models') {\n      const {\n        pricing_model,\n        subscription_price,\n        conversion_rate,\n        usage_price,\n        avg_usage_per_user\n      } = analysisParams;\n      switch (pricing_model) {\n        case 'subscription':\n          if (subscription_price <= 0) {\n            throw new Error('Subscription price must be greater than 0');\n          }\n          break;\n        case 'usage_based':\n          if (usage_price <= 0 || avg_usage_per_user <= 0) {\n            throw new Error('Usage price and average usage must be greater than 0');\n          }\n          break;\n        case 'hybrid':\n          if (subscription_price <= 0 || usage_price <= 0 || avg_usage_per_user <= 0) {\n            throw new Error('All pricing parameters must be greater than 0 for hybrid model');\n          }\n          break;\n      }\n      if (conversion_rate <= 0 || conversion_rate > 1) {\n        throw new Error('Conversion rate must be between 0 and 1');\n      }\n    }\n  };\n  const validateParameters = () => {\n    const {\n      pricing_model,\n      subscription_price,\n      usage_price,\n      avg_usage_per_user,\n      conversion_rate\n    } = analysisParams;\n    if (pricing_model === 'subscription' && subscription_price <= 0) {\n      throw new Error('Subscription price must be greater than 0 for subscription model');\n    }\n    if (pricing_model === 'usage_based' && usage_price <= 0) {\n      throw new Error('Usage price must be greater than 0 for usage-based model');\n    }\n    if (pricing_model === 'hybrid') {\n      if (subscription_price <= 0) {\n        throw new Error('Subscription price must be greater than 0 for hybrid model');\n      }\n      if (usage_price <= 0) {\n        throw new Error('Usage price must be greater than 0 for hybrid model');\n      }\n    }\n    if (['usage_based', 'hybrid'].includes(pricing_model) && avg_usage_per_user <= 0) {\n      throw new Error('Average usage per user must be greater than 0 for usage-based and hybrid models');\n    }\n    if (conversion_rate < 0 || conversion_rate > 1) {\n      throw new Error('Conversion rate must be between 0 and 1');\n    }\n  };\n  const runAnalysis = async () => {\n    try {\n      setError(null);\n\n      // Validate parameters before making API call\n      validateParameters();\n      const response = await fetch('http://localhost:5000/api/analyze', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          analysisType: selectedGraph,\n          params: {\n            ...analysisParams,\n            // Ensure required parameters are present for each model\n            n_users: analysisParams.n_users || 1000,\n            subscription_price: analysisParams.subscription_price || 0,\n            conversion_rate: analysisParams.conversion_rate || 0,\n            usage_price: analysisParams.usage_price || 0,\n            avg_usage_per_user: analysisParams.avg_usage_per_user || 0\n          }\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Server error: ${errorText}`);\n      }\n      const data = await response.json();\n      console.log('Received data:', data);\n      if (data.error) {\n        throw new Error(data.error);\n      }\n\n      // Validate response data structure\n      if (!data.graphData || !data.graphData.labels || !data.graphData.datasets) {\n        throw new Error('Invalid data format received from server');\n      }\n\n      // Ensure datasets are not empty\n      if (data.graphData.datasets.length === 0) {\n        throw new Error('No data received for the selected parameters');\n      }\n\n      // Verify data points match labels\n      const labelsLength = data.graphData.labels.length;\n      const invalidDataset = data.graphData.datasets.find(ds => ds.data.length !== labelsLength);\n      if (invalidDataset) {\n        throw new Error(`Data mismatch in dataset: ${invalidDataset.label}`);\n      }\n      setResults(data);\n    } catch (error) {\n      console.error('Error in runAnalysis:', error);\n      setError(error.message);\n      setResults(null);\n    }\n  };\n  const renderInputs = () => {\n    switch (selectedGraph) {\n      case 'network_value':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"params-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Network Value Parameters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Network Value Multiplier:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: analysisParams.network_value_multiplier,\n              onChange: e => handleParamChange('network_value_multiplier', parseFloat(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Number of Users:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: analysisParams.n_users,\n              onChange: e => handleParamChange('n_users', parseInt(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this);\n      case 'cost_structure':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"params-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Cost Structure Parameters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Base Cost per User:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              step: \"0.01\",\n              value: analysisParams.base_cost_per_user,\n              onChange: e => handleParamChange('base_cost_per_user', parseFloat(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Infrastructure Base Cost:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: analysisParams.infrastructure_base,\n              onChange: e => handleParamChange('infrastructure_base', parseFloat(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Infrastructure Scaling:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              step: \"0.1\",\n              value: analysisParams.infrastructure_scaling,\n              onChange: e => handleParamChange('infrastructure_scaling', parseFloat(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this);\n      case 'revenue_models':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"params-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Revenue Model Parameters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Pricing Model:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: analysisParams.pricing_model,\n              onChange: e => {\n                const newModel = e.target.value;\n                const baseParams = {\n                  pricing_model: newModel,\n                  revenue_per_user: 0,\n                  total_revenue: 0\n                };\n                switch (newModel) {\n                  case 'freemium':\n                    Object.assign(baseParams, {\n                      subscription_price: 10,\n                      conversion_rate: 0.05,\n                      usage_price: 0,\n                      avg_usage_per_user: 0,\n                      n_users: analysisParams.n_users || 1000 // Preserve or set default user count\n                    });\n                    break;\n                  case 'subscription':\n                    Object.assign(baseParams, {\n                      subscription_price: 10,\n                      conversion_rate: 1,\n                      usage_price: 0,\n                      avg_usage_per_user: 0,\n                      n_users: analysisParams.n_users || 1000\n                    });\n                    break;\n                  case 'usage_based':\n                    Object.assign(baseParams, {\n                      subscription_price: 0,\n                      conversion_rate: 1,\n                      usage_price: 0.01,\n                      avg_usage_per_user: 100,\n                      n_users: analysisParams.n_users || 1000\n                    });\n                    break;\n                  case 'hybrid':\n                    Object.assign(baseParams, {\n                      subscription_price: 5,\n                      conversion_rate: 0.1,\n                      usage_price: 0.005,\n                      avg_usage_per_user: 50,\n                      n_users: analysisParams.n_users || 1000\n                    });\n                    break;\n                  default:\n                    throw new Error('Invalid pricing model selected');\n                }\n\n                // Update all parameters at once to prevent intermediate invalid states\n                setAnalysisParams(prev => ({\n                  ...prev,\n                  ...baseParams\n                }));\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"freemium\",\n                children: \"Freemium\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 387,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"subscription\",\n                children: \"Subscription\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"usage_based\",\n                children: \"Usage Based\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"hybrid\",\n                children: \"Hybrid\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Subscription Price:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"0\",\n              step: \"0.01\",\n              disabled: analysisParams.pricing_model === 'usage_based',\n              value: analysisParams.subscription_price,\n              onChange: e => handleParamChange('subscription_price', Math.max(0, parseFloat(e.target.value) || 0))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Conversion Rate:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"0\",\n              max: \"1\",\n              step: \"0.01\",\n              value: analysisParams.conversion_rate,\n              onChange: e => {\n                const value = parseFloat(e.target.value);\n                if (value >= 0 && value <= 1) {\n                  handleParamChange('conversion_rate', value);\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                marginLeft: '5px',\n                fontSize: '0.8em',\n                color: '#666'\n              },\n              children: \"(0-1)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Usage Price:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"0\",\n              step: \"0.01\",\n              disabled: analysisParams.pricing_model === 'subscription' || analysisParams.pricing_model === 'freemium',\n              value: analysisParams.usage_price,\n              onChange: e => handleParamChange('usage_price', Math.max(0, parseFloat(e.target.value) || 0))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Average Usage per User:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 435,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"0\",\n              step: \"1\",\n              disabled: analysisParams.pricing_model === 'subscription' || analysisParams.pricing_model === 'freemium',\n              value: analysisParams.avg_usage_per_user,\n              onChange: e => handleParamChange('avg_usage_per_user', Math.max(0, parseInt(e.target.value) || 0))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 436,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 11\n        }, this);\n      case 'market_pricing':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"params-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Market Analysis Parameters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"GDP ($):\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: analysisParams.gdp,\n              onChange: e => handleParamChange('gdp', parseFloat(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Population:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: analysisParams.population,\n              onChange: e => handleParamChange('population', parseInt(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 462,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Target Percentile:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"0\",\n              max: \"100\",\n              value: analysisParams.target_percentile,\n              onChange: e => handleParamChange('target_percentile', parseFloat(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [analysisParams.target_percentile, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 477,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Price to Income Ratio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              step: \"0.001\",\n              value: analysisParams.price_to_income_ratio,\n              onChange: e => handleParamChange('price_to_income_ratio', parseFloat(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 11\n        }, this);\n      case 'user_growth':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"params-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Growth Scenario Parameters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Maximum Users:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 496,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: analysisParams.max_users,\n              onChange: e => handleParamChange('max_users', parseInt(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 497,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Months:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 504,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: analysisParams.months,\n              onChange: e => handleParamChange('months', parseInt(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 505,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 11\n        }, this);\n      default:\n        return null;\n    }\n  };\n\n  // Initialize chart configuration\n  const getChartConfig = results => ({\n    data: {\n      labels: results.graphData.labels,\n      datasets: results.graphData.datasets.map(dataset => ({\n        ...dataset,\n        tension: 0.4,\n        pointRadius: 2,\n        borderWidth: 2\n      }))\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      animation: {\n        duration: 750\n      },\n      plugins: {\n        title: {\n          display: true,\n          text: results.title,\n          font: {\n            size: 16\n          }\n        },\n        legend: {\n          position: 'top',\n          labels: {\n            usePointStyle: true\n          }\n        },\n        tooltip: {\n          mode: 'index',\n          intersect: false\n        }\n      },\n      scales: getScaleConfig(selectedGraph)\n    }\n  });\n  const getScaleConfig = graphType => {\n    const baseConfig = {\n      x: {\n        display: true,\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        display: true,\n        position: 'left',\n        beginAtZero: true\n      }\n    };\n    switch (graphType) {\n      case 'market_pricing':\n        return {\n          ...baseConfig,\n          x: {\n            ...baseConfig.x,\n            title: {\n              display: true,\n              text: 'Target Percentile'\n            }\n          },\n          y: {\n            ...baseConfig.y,\n            title: {\n              display: true,\n              text: 'Revenue ($)'\n            },\n            ticks: {\n              callback: value => '$' + value.toLocaleString()\n            }\n          }\n        };\n      case 'user_growth':\n        return {\n          ...baseConfig,\n          x: {\n            ...baseConfig.x,\n            type: 'linear',\n            title: {\n              display: true,\n              text: 'Months'\n            }\n          },\n          y: {\n            ...baseConfig.y,\n            title: {\n              display: true,\n              text: 'Users'\n            },\n            ticks: {\n              callback: value => value.toLocaleString()\n            }\n          }\n        };\n      default:\n        return baseConfig;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Fresco AI Value Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 603,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Graph Selection\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Select Graph Type:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 610,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedGraph,\n              onChange: e => setSelectedGraph(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"cost_structure\",\n                children: \"Cost Structure Analysis\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 615,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"network_value\",\n                children: \"Network Value Growth\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 616,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"revenue_models\",\n                children: \"Revenue Models Comparison\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 617,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"user_growth\",\n                children: \"User Growth Scenarios\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 618,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"market_pricing\",\n                children: \"Market Pricing Analysis\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 619,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 611,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 11\n        }, this), renderInputs(), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"run-button\",\n          onClick: runAnalysis,\n          children: \"Run Analysis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          style: {\n            padding: '10px',\n            marginTop: '10px',\n            backgroundColor: '#ffebee',\n            border: '1px solid #ffcdd2',\n            borderRadius: '4px',\n            color: '#c62828'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Error:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 15\n          }, this), \" \", error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-container\",\n        children: results && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"graph-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"graph\",\n            style: {\n              position: 'relative',\n              minHeight: '400px'\n            },\n            children: error ? /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                position: 'absolute',\n                top: '50%',\n                left: '50%',\n                transform: 'translate(-50%, -50%)',\n                textAlign: 'center',\n                color: '#c62828'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Error loading chart. Please try again.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 654,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 646,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_createElement(Line, {\n              ref: chartRef,\n              ...getChartConfig(results),\n              key: selectedGraph,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 657,\n                columnNumber: 19\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 644,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"graph-description\",\n            children: (() => {\n              switch (selectedGraph) {\n                case 'cost_structure':\n                  return /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      children: \"This model analyzes how costs scale with user growth, combining per-user costs and infrastructure overhead. The logarithmic scale shows the non-linear relationship between user base expansion and total costs.\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 670,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"formula\",\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Formula:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 672,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 672,\n                        columnNumber: 54\n                      }, this), \"Total Cost = (Base Cost \\xD7 Number of Users) + (Infrastructure Base \\xD7 Infrastructure Scaling\", /*#__PURE__*/_jsxDEV(\"sup\", {\n                        children: \"log(Users)\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 673,\n                        columnNumber: 119\n                      }, this), \")\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 673,\n                        columnNumber: 141\n                      }, this), \"Where:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 674,\n                        columnNumber: 35\n                      }, this), \"Base Cost = \", analysisParams.base_cost_per_user, \" per user\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 675,\n                        columnNumber: 85\n                      }, this), \"Infrastructure Base = $\", analysisParams.infrastructure_base, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 676,\n                        columnNumber: 88\n                      }, this), \"Infrastructure Scaling = \", analysisParams.infrastructure_scaling]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 671,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true);\n                case 'network_value':\n                  return /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      children: \"The network value model demonstrates how the platform's total value grows with its user base. It incorporates network effects where each additional user increases the value for all existing users.\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 684,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"formula\",\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Formula:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 686,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 686,\n                        columnNumber: 54\n                      }, this), \"Network Value = Network Multiplier \\xD7 Users \\xD7 log(Users)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 687,\n                        columnNumber: 84\n                      }, this), \"Where:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 688,\n                        columnNumber: 35\n                      }, this), \"Network Multiplier = $\", analysisParams.network_value_multiplier, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 689,\n                        columnNumber: 92\n                      }, this), \"Users = \", analysisParams.n_users]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 685,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true);\n                case 'revenue_models':\n                  return /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      children: \"Compare different revenue strategies: Freemium (free basic + premium features), Subscription (fixed recurring fee), Usage-based (pay-per-use), and Hybrid (combination). Each model's effectiveness varies with user behavior and market positioning.\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 697,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"formula\",\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Formula:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 699,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 699,\n                        columnNumber: 54\n                      }, this), analysisParams.pricing_model === 'freemium' && /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: [\"Freemium Revenue = Users \\xD7 Conversion Rate \\xD7 Subscription Price\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 701,\n                          columnNumber: 96\n                        }, this), \"Where: Users = \", analysisParams.n_users, \", Conversion = \", (analysisParams.conversion_rate * 100).toFixed(1), \"%, Price = $\", analysisParams.subscription_price]\n                      }, void 0, true), analysisParams.pricing_model === 'subscription' && /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: [\"Subscription Revenue = Users \\xD7 Subscription Price\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 705,\n                          columnNumber: 82\n                        }, this), \"Where: Users = \", analysisParams.n_users, \", Price = $\", analysisParams.subscription_price]\n                      }, void 0, true), analysisParams.pricing_model === 'usage_based' && /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: [\"Usage Revenue = Users \\xD7 Average Usage \\xD7 Usage Price\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 709,\n                          columnNumber: 84\n                        }, this), \"Where: Users = \", analysisParams.n_users, \", Avg Usage = \", analysisParams.avg_usage_per_user, \", Price = $\", analysisParams.usage_price]\n                      }, void 0, true), analysisParams.pricing_model === 'hybrid' && /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: [\"Hybrid Revenue = (Users \\xD7 Subscription Price) + (Users \\xD7 Average Usage \\xD7 Usage Price)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 713,\n                          columnNumber: 118\n                        }, this), \"Where: Users = \", analysisParams.n_users, \", Sub Price = $\", analysisParams.subscription_price, \", Usage = \", analysisParams.avg_usage_per_user, \", Usage Price = $\", analysisParams.usage_price]\n                      }, void 0, true)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 698,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true);\n                case 'user_growth':\n                  return /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      children: \"Visualize user acquisition scenarios over time, showing how different growth rates and market conditions affect the platform's user base expansion.\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 722,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"formula\",\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Formula:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 724,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 724,\n                        columnNumber: 54\n                      }, this), \"Users(t) = Max Users \\xD7 (1 - e\", /*#__PURE__*/_jsxDEV(\"sup\", {\n                        children: \"-rt\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 725,\n                        columnNumber: 58\n                      }, this), \")\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 725,\n                        columnNumber: 73\n                      }, this), \"Where:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 726,\n                        columnNumber: 35\n                      }, this), \"Max Users = \", analysisParams.max_users, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 727,\n                        columnNumber: 67\n                      }, this), \"Time Period = \", analysisParams.months, \" months\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 728,\n                        columnNumber: 73\n                      }, this), \"r = growth rate (calculated based on target timeline)\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 723,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true);\n                case 'market_pricing':\n                  return /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      children: \"Analyze optimal pricing based on market demographics, showing revenue potential across different price points and target market segments.\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 736,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"formula\",\n                      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: \"Formula:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 738,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 738,\n                        columnNumber: 54\n                      }, this), \"Price = GDP per Capita \\xD7 Price-to-Income Ratio \\xD7 Income Distribution Factor\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 739,\n                        columnNumber: 104\n                      }, this), \"Where:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 740,\n                        columnNumber: 35\n                      }, this), \"GDP per Capita = $\", (analysisParams.gdp / analysisParams.population).toFixed(2), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 741,\n                        columnNumber: 108\n                      }, this), \"Price-to-Income Ratio = \", analysisParams.price_to_income_ratio, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 742,\n                        columnNumber: 91\n                      }, this), \"Target Percentile = \", analysisParams.target_percentile, \"%\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 737,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true);\n                default:\n                  return '';\n              }\n            })()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 664,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 602,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"eLG5CwzGuenCaFe1no7EvfUG+p0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Line","Chart","ChartJS","CategoryScale","LinearScale","LogarithmicScale","PointElement","LineElement","Title","Tooltip","Legend","React","useState","useEffect","createElement","_createElement","jsxDEV","_jsxDEV","Fragment","_Fragment","register","App","_s","analysisParams","setAnalysisParams","network_value_multiplier","n_users","base_cost_per_user","infrastructure_base","infrastructure_scaling","pricing_model","subscription_price","conversion_rate","usage_price","avg_usage_per_user","revenue_per_user","total_revenue","gdp","population","target_percentile","price_to_income_ratio","shape_parameter","max_users","months","selectedGraph","setSelectedGraph","results","setResults","error","setError","chartRef","useRef","chart","frameId","initChart","current","destroy","requestAnimationFrame","canvas","parentNode","update","console","cancelAnimationFrame","formatNumber","value","decimals","isNaN","Number","toFixed","handleParamChange","param","newValue","parseFloat","prev","err","message","validateParams","Error","validateParameters","includes","runAnalysis","response","fetch","method","headers","body","JSON","stringify","analysisType","params","ok","errorText","text","data","json","log","graphData","labels","datasets","length","labelsLength","invalidDataset","find","ds","label","renderInputs","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","parseInt","step","newModel","baseParams","Object","assign","min","disabled","Math","max","style","marginLeft","fontSize","color","getChartConfig","map","dataset","tension","pointRadius","borderWidth","options","responsive","maintainAspectRatio","animation","duration","plugins","title","display","font","size","legend","position","usePointStyle","tooltip","mode","intersect","scales","getScaleConfig","graphType","baseConfig","x","grid","y","beginAtZero","ticks","callback","toLocaleString","onClick","padding","marginTop","backgroundColor","border","borderRadius","minHeight","top","left","transform","textAlign","ref","key","__self","__source","_c","$RefreshReg$"],"sources":["C:/Users/admin/Desktop/JFF-modeling and analysis/src/App.js"],"sourcesContent":["import { Line } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  LogarithmicScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n} from 'chart.js';\r\nimport './App.css';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  LogarithmicScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nfunction App() {\r\n  const [analysisParams, setAnalysisParams] = useState({\r\n    // Network Value Parameters\r\n    network_value_multiplier: 100,\r\n    n_users: 1000,\r\n    \r\n    // AI Cost Parameters\r\n    base_cost_per_user: 0.1,\r\n    infrastructure_base: 1000,\r\n    infrastructure_scaling: 1.2,\r\n    \r\n    // Revenue Model Parameters\r\n    pricing_model: 'freemium',\r\n    subscription_price: 10,\r\n    conversion_rate: 0.05,\r\n    usage_price: 0.01,\r\n    avg_usage_per_user: 100,\r\n    revenue_per_user: 0,  // Calculated revenue per user\r\n    total_revenue: 0,     // Total projected revenue\r\n    \r\n    // Market Analysis Parameters\r\n    gdp: 1e12,\r\n    population: 1e8,\r\n    target_percentile: 50,\r\n    price_to_income_ratio: 0.01,\r\n    shape_parameter: 1.0,\r\n    \r\n    // Growth Scenario Parameters\r\n    max_users: 100000,\r\n    months: 36\r\n  });\r\n\r\n  const [selectedGraph, setSelectedGraph] = useState('cost_structure');\r\n  const [results, setResults] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const chartRef = React.useRef(null);\r\n\r\n  useEffect(() => {\r\n    let chart = null;\r\n    let frameId = null;\r\n\r\n    const initChart = () => {\r\n      if (!results || !chartRef.current) return;\r\n\r\n      try {\r\n        // Ensure any existing chart is destroyed\r\n        if (chartRef.current.chart) {\r\n          chartRef.current.chart.destroy();\r\n        }\r\n\r\n        // Create new chart instance\r\n        chart = chartRef.current.chart;\r\n\r\n        // Wait for the next frame to ensure the DOM is ready\r\n        frameId = requestAnimationFrame(() => {\r\n          try {\r\n            if (chart && chart.canvas && chart.canvas.parentNode) {\r\n              chart.update('none'); // Disable animation for the first update\r\n            }\r\n          } catch (error) {\r\n            console.error('Error updating chart:', error);\r\n            setError('Error displaying chart. Please try again.');\r\n          }\r\n        });\r\n      } catch (error) {\r\n        console.error('Error initializing chart:', error);\r\n        setError('Error initializing chart. Please try again.');\r\n      }\r\n    };\r\n\r\n    initChart();\r\n\r\n    return () => {\r\n      // Clean up\r\n      if (frameId) {\r\n        cancelAnimationFrame(frameId);\r\n      }\r\n      try {\r\n        if (chart && chart.destroy) {\r\n          chart.destroy();\r\n        }\r\n      } catch (error) {\r\n        console.error('Error destroying chart:', error);\r\n      }\r\n    };\r\n  }, [results, selectedGraph]); // Also reinitialize when graph type changes\r\n\r\n  // Cleanup on component unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (chartRef.current) {\r\n        chartRef.current.destroy();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const formatNumber = (value, decimals = 2) => {\r\n    if (typeof value !== 'number' || isNaN(value)) return '';\r\n    return Number(value.toFixed(decimals));\r\n  };\r\n\r\n  const handleParamChange = (param, value) => {\r\n    try {\r\n      const newValue = typeof value === 'string' ? parseFloat(value) : value;\r\n      if (!isNaN(newValue)) {\r\n        setAnalysisParams(prev => ({\r\n          ...prev,\r\n          [param]: newValue\r\n        }));\r\n        setError(null); // Clear any previous errors\r\n      }\r\n    } catch (err) {\r\n      setError(`Invalid value for ${param}: ${err.message}`);\r\n    }\r\n  };\r\n\r\n  const validateParams = () => {\r\n    if (selectedGraph === 'revenue_models') {\r\n      const { pricing_model, subscription_price, conversion_rate, usage_price, avg_usage_per_user } = analysisParams;\r\n      \r\n      switch(pricing_model) {\r\n        case 'subscription':\r\n          if (subscription_price <= 0) {\r\n            throw new Error('Subscription price must be greater than 0');\r\n          }\r\n          break;\r\n        case 'usage_based':\r\n          if (usage_price <= 0 || avg_usage_per_user <= 0) {\r\n            throw new Error('Usage price and average usage must be greater than 0');\r\n          }\r\n          break;\r\n        case 'hybrid':\r\n          if (subscription_price <= 0 || usage_price <= 0 || avg_usage_per_user <= 0) {\r\n            throw new Error('All pricing parameters must be greater than 0 for hybrid model');\r\n          }\r\n          break;\r\n      }\r\n      \r\n      if (conversion_rate <= 0 || conversion_rate > 1) {\r\n        throw new Error('Conversion rate must be between 0 and 1');\r\n      }\r\n    }\r\n  };\r\n\r\n  const validateParameters = () => {\r\n    const { pricing_model, subscription_price, usage_price, avg_usage_per_user, conversion_rate } = analysisParams;\r\n    \r\n    if (pricing_model === 'subscription' && subscription_price <= 0) {\r\n      throw new Error('Subscription price must be greater than 0 for subscription model');\r\n    }\r\n    \r\n    if (pricing_model === 'usage_based' && usage_price <= 0) {\r\n      throw new Error('Usage price must be greater than 0 for usage-based model');\r\n    }\r\n    \r\n    if (pricing_model === 'hybrid') {\r\n      if (subscription_price <= 0) {\r\n        throw new Error('Subscription price must be greater than 0 for hybrid model');\r\n      }\r\n      if (usage_price <= 0) {\r\n        throw new Error('Usage price must be greater than 0 for hybrid model');\r\n      }\r\n    }\r\n    \r\n    if (['usage_based', 'hybrid'].includes(pricing_model) && avg_usage_per_user <= 0) {\r\n      throw new Error('Average usage per user must be greater than 0 for usage-based and hybrid models');\r\n    }\r\n    \r\n    if (conversion_rate < 0 || conversion_rate > 1) {\r\n      throw new Error('Conversion rate must be between 0 and 1');\r\n    }\r\n  };\r\n\r\n  const runAnalysis = async () => {\r\n    try {\r\n      setError(null);\r\n      \r\n      // Validate parameters before making API call\r\n      validateParameters();\r\n      \r\n      const response = await fetch('http://localhost:5000/api/analyze', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          analysisType: selectedGraph,\r\n          params: {\r\n            ...analysisParams,\r\n            // Ensure required parameters are present for each model\r\n            n_users: analysisParams.n_users || 1000,\r\n            subscription_price: analysisParams.subscription_price || 0,\r\n            conversion_rate: analysisParams.conversion_rate || 0,\r\n            usage_price: analysisParams.usage_price || 0,\r\n            avg_usage_per_user: analysisParams.avg_usage_per_user || 0\r\n          }\r\n        }),\r\n      });\r\n        \r\n        if (!response.ok) {\r\n          const errorText = await response.text();\r\n          throw new Error(`Server error: ${errorText}`);\r\n        }\r\n        \r\n        const data = await response.json();\r\n        console.log('Received data:', data);\r\n        \r\n        if (data.error) {\r\n          throw new Error(data.error);\r\n        }\r\n        \r\n        // Validate response data structure\r\n        if (!data.graphData || !data.graphData.labels || !data.graphData.datasets) {\r\n          throw new Error('Invalid data format received from server');\r\n        }\r\n        \r\n        // Ensure datasets are not empty\r\n        if (data.graphData.datasets.length === 0) {\r\n          throw new Error('No data received for the selected parameters');\r\n        }\r\n        \r\n        // Verify data points match labels\r\n        const labelsLength = data.graphData.labels.length;\r\n        const invalidDataset = data.graphData.datasets.find(ds => ds.data.length !== labelsLength);\r\n        if (invalidDataset) {\r\n          throw new Error(`Data mismatch in dataset: ${invalidDataset.label}`);\r\n        }\r\n        \r\n        setResults(data);\r\n    } catch (error) {\r\n        console.error('Error in runAnalysis:', error);\r\n        setError(error.message);\r\n        setResults(null);\r\n    }\r\n};\r\n\r\n\r\n\r\n  const renderInputs = () => {\r\n    switch (selectedGraph) {\r\n      case 'network_value':\r\n        return (\r\n          <div className=\"params-group\">\r\n            <h3>Network Value Parameters</h3>\r\n            <div className=\"input-group\">\r\n              <label>Network Value Multiplier:</label>\r\n              <input\r\n                type=\"number\"\r\n                value={analysisParams.network_value_multiplier}\r\n                onChange={(e) => handleParamChange('network_value_multiplier', parseFloat(e.target.value))}\r\n              />\r\n            </div>\r\n            <div className=\"input-group\">\r\n              <label>Number of Users:</label>\r\n              <input\r\n                type=\"number\"\r\n                value={analysisParams.n_users}\r\n                onChange={(e) => handleParamChange('n_users', parseInt(e.target.value))}\r\n              />\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'cost_structure':\r\n        return (\r\n          <div className=\"params-group\">\r\n            <h3>Cost Structure Parameters</h3>\r\n            <div className=\"input-group\">\r\n              <label>Base Cost per User:</label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                value={analysisParams.base_cost_per_user}\r\n                onChange={(e) => handleParamChange('base_cost_per_user', parseFloat(e.target.value))}\r\n              />\r\n            </div>\r\n            <div className=\"input-group\">\r\n              <label>Infrastructure Base Cost:</label>\r\n              <input\r\n                type=\"number\"\r\n                value={analysisParams.infrastructure_base}\r\n                onChange={(e) => handleParamChange('infrastructure_base', parseFloat(e.target.value))}\r\n              />\r\n            </div>\r\n            <div className=\"input-group\">\r\n              <label>Infrastructure Scaling:</label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.1\"\r\n                value={analysisParams.infrastructure_scaling}\r\n                onChange={(e) => handleParamChange('infrastructure_scaling', parseFloat(e.target.value))}\r\n              />\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'revenue_models':\r\n        return (\r\n          <div className=\"params-group\">\r\n            <h3>Revenue Model Parameters</h3>\r\n            <div className=\"input-group\">\r\n              <label>Pricing Model:</label>\r\n              <select\r\n                value={analysisParams.pricing_model}\r\n                onChange={(e) => {\r\n                  const newModel = e.target.value;\r\n                  const baseParams = {\r\n                    pricing_model: newModel,\r\n                    revenue_per_user: 0,\r\n                    total_revenue: 0\r\n                  };\r\n                  \r\n                  switch(newModel) {\r\n                    case 'freemium':\r\n                      Object.assign(baseParams, {\r\n                        subscription_price: 10,\r\n                        conversion_rate: 0.05,\r\n                        usage_price: 0,\r\n                        avg_usage_per_user: 0,\r\n                        n_users: analysisParams.n_users || 1000 // Preserve or set default user count\r\n                      });\r\n                      break;\r\n                    case 'subscription':\r\n                      Object.assign(baseParams, {\r\n                        subscription_price: 10,\r\n                        conversion_rate: 1,\r\n                        usage_price: 0,\r\n                        avg_usage_per_user: 0,\r\n                        n_users: analysisParams.n_users || 1000\r\n                      });\r\n                      break;\r\n                    case 'usage_based':\r\n                      Object.assign(baseParams, {\r\n                        subscription_price: 0,\r\n                        conversion_rate: 1,\r\n                        usage_price: 0.01,\r\n                        avg_usage_per_user: 100,\r\n                        n_users: analysisParams.n_users || 1000\r\n                      });\r\n                      break;\r\n                    case 'hybrid':\r\n                      Object.assign(baseParams, {\r\n                        subscription_price: 5,\r\n                        conversion_rate: 0.1,\r\n                        usage_price: 0.005,\r\n                        avg_usage_per_user: 50,\r\n                        n_users: analysisParams.n_users || 1000\r\n                      });\r\n                      break;\r\n                    default:\r\n                      throw new Error('Invalid pricing model selected');\r\n                  }\r\n                  \r\n                  // Update all parameters at once to prevent intermediate invalid states\r\n                  setAnalysisParams(prev => ({\r\n                    ...prev,\r\n                    ...baseParams\r\n                  }));\r\n                }}\r\n              >\r\n                <option value=\"freemium\">Freemium</option>\r\n                <option value=\"subscription\">Subscription</option>\r\n                <option value=\"usage_based\">Usage Based</option>\r\n                <option value=\"hybrid\">Hybrid</option>\r\n              </select>\r\n            </div>\r\n            <div className=\"input-group\">\r\n              <label>Subscription Price:</label>\r\n              <input\r\n                type=\"number\"\r\n                min=\"0\"\r\n                step=\"0.01\"\r\n                disabled={analysisParams.pricing_model === 'usage_based'}\r\n                value={analysisParams.subscription_price}\r\n                onChange={(e) => handleParamChange('subscription_price', Math.max(0, parseFloat(e.target.value) || 0))}\r\n              />\r\n            </div>\r\n            <div className=\"input-group\">\r\n              <label>Conversion Rate:</label>\r\n              <input\r\n                type=\"number\"\r\n                min=\"0\"\r\n                max=\"1\"\r\n                step=\"0.01\"\r\n                value={analysisParams.conversion_rate}\r\n                onChange={(e) => {\r\n                  const value = parseFloat(e.target.value);\r\n                  if (value >= 0 && value <= 1) {\r\n                    handleParamChange('conversion_rate', value);\r\n                  }\r\n                }}\r\n              />\r\n              <span style={{ marginLeft: '5px', fontSize: '0.8em', color: '#666' }}>\r\n                (0-1)\r\n              </span>\r\n            </div>\r\n            <div className=\"input-group\">\r\n              <label>Usage Price:</label>\r\n              <input\r\n                type=\"number\"\r\n                min=\"0\"\r\n                step=\"0.01\"\r\n                disabled={analysisParams.pricing_model === 'subscription' || analysisParams.pricing_model === 'freemium'}\r\n                value={analysisParams.usage_price}\r\n                onChange={(e) => handleParamChange('usage_price', Math.max(0, parseFloat(e.target.value) || 0))}\r\n              />\r\n            </div>\r\n            <div className=\"input-group\">\r\n              <label>Average Usage per User:</label>\r\n              <input\r\n                type=\"number\"\r\n                min=\"0\"\r\n                step=\"1\"\r\n                disabled={analysisParams.pricing_model === 'subscription' || analysisParams.pricing_model === 'freemium'}\r\n                value={analysisParams.avg_usage_per_user}\r\n                onChange={(e) => handleParamChange('avg_usage_per_user', Math.max(0, parseInt(e.target.value) || 0))}\r\n              />\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'market_pricing':\r\n        return (\r\n          <div className=\"params-group\">\r\n            <h3>Market Analysis Parameters</h3>\r\n            <div className=\"input-group\">\r\n              <label>GDP ($):</label>\r\n              <input\r\n                type=\"number\"\r\n                value={analysisParams.gdp}\r\n                onChange={(e) => handleParamChange('gdp', parseFloat(e.target.value))}\r\n              />\r\n            </div>\r\n            <div className=\"input-group\">\r\n              <label>Population:</label>\r\n              <input\r\n                type=\"number\"\r\n                value={analysisParams.population}\r\n                onChange={(e) => handleParamChange('population', parseInt(e.target.value))}\r\n              />\r\n            </div>\r\n            <div className=\"input-group\">\r\n              <label>Target Percentile:</label>\r\n              <input\r\n                type=\"range\"\r\n                min=\"0\"\r\n                max=\"100\"\r\n                value={analysisParams.target_percentile}\r\n                onChange={(e) => handleParamChange('target_percentile', parseFloat(e.target.value))}\r\n              />\r\n              <span>{analysisParams.target_percentile}%</span>\r\n            </div>\r\n            <div className=\"input-group\">\r\n              <label>Price to Income Ratio:</label>\r\n              <input\r\n                type=\"number\"\r\n                step=\"0.001\"\r\n                value={analysisParams.price_to_income_ratio}\r\n                onChange={(e) => handleParamChange('price_to_income_ratio', parseFloat(e.target.value))}\r\n              />\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'user_growth':\r\n        return (\r\n          <div className=\"params-group\">\r\n            <h3>Growth Scenario Parameters</h3>\r\n            <div className=\"input-group\">\r\n              <label>Maximum Users:</label>\r\n              <input\r\n                type=\"number\"\r\n                value={analysisParams.max_users}\r\n                onChange={(e) => handleParamChange('max_users', parseInt(e.target.value))}\r\n              />\r\n            </div>\r\n            <div className=\"input-group\">\r\n              <label>Months:</label>\r\n              <input\r\n                type=\"number\"\r\n                value={analysisParams.months}\r\n                onChange={(e) => handleParamChange('months', parseInt(e.target.value))}\r\n              />\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  // Initialize chart configuration\r\n  const getChartConfig = (results) => ({\r\n    data: {\r\n      labels: results.graphData.labels,\r\n      datasets: results.graphData.datasets.map(dataset => ({\r\n        ...dataset,\r\n        tension: 0.4,\r\n        pointRadius: 2,\r\n        borderWidth: 2,\r\n      }))\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      animation: {\r\n        duration: 750\r\n      },\r\n      plugins: {\r\n        title: {\r\n          display: true,\r\n          text: results.title,\r\n          font: { size: 16 }\r\n        },\r\n        legend: {\r\n          position: 'top',\r\n          labels: { usePointStyle: true }\r\n        },\r\n        tooltip: {\r\n          mode: 'index',\r\n          intersect: false\r\n        }\r\n      },\r\n      scales: getScaleConfig(selectedGraph)\r\n    }\r\n  });\r\n\r\n  const getScaleConfig = (graphType) => {\r\n    const baseConfig = {\r\n      x: {\r\n        display: true,\r\n        grid: { display: false }\r\n      },\r\n      y: {\r\n        display: true,\r\n        position: 'left',\r\n        beginAtZero: true\r\n      }\r\n    };\r\n\r\n    switch(graphType) {\r\n      case 'market_pricing':\r\n        return {\r\n          ...baseConfig,\r\n          x: {\r\n            ...baseConfig.x,\r\n            title: { display: true, text: 'Target Percentile' }\r\n          },\r\n          y: {\r\n            ...baseConfig.y,\r\n            title: { display: true, text: 'Revenue ($)' },\r\n            ticks: { callback: value => '$' + value.toLocaleString() }\r\n          }\r\n        };\r\n      case 'user_growth':\r\n        return {\r\n          ...baseConfig,\r\n          x: {\r\n            ...baseConfig.x,\r\n            type: 'linear',\r\n            title: { display: true, text: 'Months' }\r\n          },\r\n          y: {\r\n            ...baseConfig.y,\r\n            title: { display: true, text: 'Users' },\r\n            ticks: { callback: value => value.toLocaleString() }\r\n          }\r\n        };\r\n      default:\r\n        return baseConfig;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Fresco AI Value Analysis</h1>\r\n      \r\n      <div className=\"main-container\">\r\n        <div className=\"controls-container\">\r\n          <div className=\"control-group\">\r\n            <h2>Graph Selection</h2>\r\n            <div className=\"input-group\">\r\n              <label>Select Graph Type:</label>\r\n              <select\r\n                value={selectedGraph}\r\n                onChange={(e) => setSelectedGraph(e.target.value)}\r\n              >\r\n                <option value=\"cost_structure\">Cost Structure Analysis</option>\r\n                <option value=\"network_value\">Network Value Growth</option>\r\n                <option value=\"revenue_models\">Revenue Models Comparison</option>\r\n                <option value=\"user_growth\">User Growth Scenarios</option>\r\n                <option value=\"market_pricing\">Market Pricing Analysis</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n\r\n          {renderInputs()}\r\n\r\n          <button className=\"run-button\" onClick={runAnalysis}>Run Analysis</button>\r\n          {error && (\r\n            <div className=\"error-message\" style={{ \r\n              padding: '10px',\r\n              marginTop: '10px',\r\n              backgroundColor: '#ffebee',\r\n              border: '1px solid #ffcdd2',\r\n              borderRadius: '4px',\r\n              color: '#c62828'\r\n            }}>\r\n              <strong>Error:</strong> {error}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"graph-container\">\r\n          {results && (\r\n            <div className=\"graph-section\">\r\n              <div className=\"graph\" style={{ position: 'relative', minHeight: '400px' }}>\r\n                {error ? (\r\n                  <div style={{\r\n                    position: 'absolute',\r\n                    top: '50%',\r\n                    left: '50%',\r\n                    transform: 'translate(-50%, -50%)',\r\n                    textAlign: 'center',\r\n                    color: '#c62828'\r\n                  }}>\r\n                    <p>Error loading chart. Please try again.</p>\r\n                  </div>\r\n                ) : (\r\n                  <Line\r\n                    ref={chartRef}\r\n                    {...getChartConfig(results)}\r\n                    key={selectedGraph}\r\n                  />\r\n                )}\r\n              </div>\r\n              <div className=\"graph-description\">\r\n                {(() => {\r\n                  switch(selectedGraph) {\r\n                    case 'cost_structure':\r\n                      return (\r\n                        <>\r\n                          <p>This model analyzes how costs scale with user growth, combining per-user costs and infrastructure overhead. The logarithmic scale shows the non-linear relationship between user base expansion and total costs.</p>\r\n                          <div className=\"formula\">\r\n                            <strong>Formula:</strong><br />\r\n                            Total Cost = (Base Cost × Number of Users) + (Infrastructure Base × Infrastructure Scaling<sup>log(Users)</sup>)<br />\r\n                            Where:<br />\r\n                            Base Cost = {analysisParams.base_cost_per_user} per user<br />\r\n                            Infrastructure Base = ${analysisParams.infrastructure_base}<br />\r\n                            Infrastructure Scaling = {analysisParams.infrastructure_scaling}\r\n                          </div>\r\n                        </>\r\n                      );\r\n                    case 'network_value':\r\n                      return (\r\n                        <>\r\n                          <p>The network value model demonstrates how the platform's total value grows with its user base. It incorporates network effects where each additional user increases the value for all existing users.</p>\r\n                          <div className=\"formula\">\r\n                            <strong>Formula:</strong><br />\r\n                            Network Value = Network Multiplier × Users × log(Users)<br />\r\n                            Where:<br />\r\n                            Network Multiplier = ${analysisParams.network_value_multiplier}<br />\r\n                            Users = {analysisParams.n_users}\r\n                          </div>\r\n                        </>\r\n                      );\r\n                    case 'revenue_models':\r\n                      return (\r\n                        <>\r\n                          <p>Compare different revenue strategies: Freemium (free basic + premium features), Subscription (fixed recurring fee), Usage-based (pay-per-use), and Hybrid (combination). Each model's effectiveness varies with user behavior and market positioning.</p>\r\n                          <div className=\"formula\">\r\n                            <strong>Formula:</strong><br />\r\n                            {analysisParams.pricing_model === 'freemium' && (\r\n                              <>Freemium Revenue = Users × Conversion Rate × Subscription Price<br />\r\n                              Where: Users = {analysisParams.n_users}, Conversion = {(analysisParams.conversion_rate * 100).toFixed(1)}%, Price = ${analysisParams.subscription_price}</>\r\n                            )}\r\n                            {analysisParams.pricing_model === 'subscription' && (\r\n                              <>Subscription Revenue = Users × Subscription Price<br />\r\n                              Where: Users = {analysisParams.n_users}, Price = ${analysisParams.subscription_price}</>\r\n                            )}\r\n                            {analysisParams.pricing_model === 'usage_based' && (\r\n                              <>Usage Revenue = Users × Average Usage × Usage Price<br />\r\n                              Where: Users = {analysisParams.n_users}, Avg Usage = {analysisParams.avg_usage_per_user}, Price = ${analysisParams.usage_price}</>\r\n                            )}\r\n                            {analysisParams.pricing_model === 'hybrid' && (\r\n                              <>Hybrid Revenue = (Users × Subscription Price) + (Users × Average Usage × Usage Price)<br />\r\n                              Where: Users = {analysisParams.n_users}, Sub Price = ${analysisParams.subscription_price}, Usage = {analysisParams.avg_usage_per_user}, Usage Price = ${analysisParams.usage_price}</>\r\n                            )}\r\n                          </div>\r\n                        </>\r\n                      );\r\n                    case 'user_growth':\r\n                      return (\r\n                        <>\r\n                          <p>Visualize user acquisition scenarios over time, showing how different growth rates and market conditions affect the platform's user base expansion.</p>\r\n                          <div className=\"formula\">\r\n                            <strong>Formula:</strong><br />\r\n                            Users(t) = Max Users × (1 - e<sup>-rt</sup>)<br />\r\n                            Where:<br />\r\n                            Max Users = {analysisParams.max_users}<br />\r\n                            Time Period = {analysisParams.months} months<br />\r\n                            r = growth rate (calculated based on target timeline)\r\n                          </div>\r\n                        </>\r\n                      );\r\n                    case 'market_pricing':\r\n                      return (\r\n                        <>\r\n                          <p>Analyze optimal pricing based on market demographics, showing revenue potential across different price points and target market segments.</p>\r\n                          <div className=\"formula\">\r\n                            <strong>Formula:</strong><br />\r\n                            Price = GDP per Capita × Price-to-Income Ratio × Income Distribution Factor<br />\r\n                            Where:<br />\r\n                            GDP per Capita = ${(analysisParams.gdp / analysisParams.population).toFixed(2)}<br />\r\n                            Price-to-Income Ratio = {analysisParams.price_to_income_ratio}<br />\r\n                            Target Percentile = {analysisParams.target_percentile}%\r\n                          </div>\r\n                        </>\r\n                      );\r\n                    default:\r\n                      return '';\r\n                  }\r\n                })()}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}